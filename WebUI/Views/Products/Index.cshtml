@{
    ViewData["Title"] = "Products";
    Layout = "_Layout";
}

@section Styles {
    <style>
        /* 🔹 Product Page Custom Styles */
        #productTabs {
            border-bottom: none;
            justify-content: center;
            gap: 10px;
        }

            #productTabs .nav-link {
                display: flex;
                align-items: center;
                justify-content: center;
                height: 45px;
                min-width: 140px;
                color: #334155;
                font-weight: 500;
                border: none;
                border-radius: 10px 10px 0 0;
                background-color: #e2e8f0;
                padding: 0 20px;
                transition: all 0.2s ease;
            }

                #productTabs .nav-link.active {
                    background-color: var(--primary-dark);
                    color: white;
                    font-weight: 600;
                    box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);
                }

                #productTabs .nav-link:hover:not(.active) {
                    background-color: #cbd5e1;
                }

        /* Search */
        #searchInput {
            border-radius: 50px;
            border: 1px solid #cbd5e1;
            padding: 10px 18px;
            transition: all 0.2s ease;
        }

            #searchInput:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.15rem rgba(37, 99, 235, 0.25);
                outline: none;
            }

        /* Buttons */
        #btnAddProduct {
            border-radius: 25px;
            padding: 8px 20px;
            font-weight: 500;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
        }

            #btnAddProduct:hover {
                background-color: var(--primary-dark);
                transform: translateY(-1px);
            }

        /* Tables */
        .custom-table {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border: none;
        }

            .custom-table thead {
                background-color: #f1f5f9;
            }

            .custom-table th {
                font-weight: 600;
                color: #1e293b;
                border-bottom: 1px solid #e2e8f0 !important;
            }

            .custom-table td {
                border-bottom: 1px solid #f1f5f9;
                vertical-align: middle;
                color: #334155;
            }

            .custom-table tr:hover {
                background-color: #f8fafc;
            }

        /* color circles */
        .color-dot {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            display: inline-block;
            margin: 0 3px;
            border: 1px solid rgba(0,0,0,0.07);
        }

        /* variant area inside modal: fixed height with scroll */
        .variant-area {
            max-height: 220px;
            overflow-y: auto;
            padding: 8px;
            border-radius: 8px;
            background: #ffffff;
            border: 1px solid #eef2f7;
        }

        /* modal fix */
        #productModal .modal-dialog {
            max-width: 820px;
        }

        #productModal .modal-body {
            max-height: 60vh;
            overflow-y: auto;
        }

        #productModal .form-control,
        #productModal .form-select {
            border-radius: 8px;
        }

        .tab-placeholder {
            text-align: center;
            padding: 50px 0;
            color: #64748b;
        }

            .tab-placeholder i {
                font-size: 40px;
                color: #94a3b8;
                margin-bottom: 10px;
            }

        /* small action btns */
        .action-btn-sm {
            padding: .28rem .45rem;
            font-size: .85rem;
            border-radius: 6px;
        }
    </style>
}

<div class="container-fluid px-4 mt-3">
    <h4 class="mb-3 fw-bold text-primary">
        <i class="bi bi-box-seam"></i> Products Management
    </h4>

    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs mb-3" id="productTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="all-tab" data-bs-toggle="tab"
                    data-bs-target="#allProducts" type="button" role="tab">
                All Products
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="lowColor-tab" data-bs-toggle="tab"
                    data-bs-target="#lowColor" type="button" role="tab">
                Low Stock (Color)
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="lowSize-tab" data-bs-toggle="tab"
                    data-bs-target="#lowSize" type="button" role="tab">
                Low Stock (Size)
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="almost-tab" data-bs-toggle="tab"
                    data-bs-target="#almostOut" type="button" role="tab">
                Almost Out (≤ 3)
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="inactive-tab" data-bs-toggle="tab"
                    data-bs-target="#inactiveProducts" type="button" role="tab">
                Inactive
            </button>
        </li>
    </ul>

    <!-- Tabs Content -->
    <div class="tab-content" id="productTabsContent">

        <!-- All Products Tab -->
        <div class="tab-pane fade show active" id="allProducts" role="tabpanel">
            <div class="d-flex justify-content-between mb-3">
                <div class="col-4">
                    <input id="searchInput" class="form-control" placeholder="Search by name, vendor or code..." />
                </div>
                <button id="btnAddProduct" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Add Product
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-bordered table-hover align-middle text-center custom-table" id="productsTable">
                    <thead class="table-light">
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                            <th>Vendor</th>
                            <th>Buying Price</th>
                            <th>Selling Price</th>
                            <th>Stock</th>
                            <th>Colors</th>
                            <th>Sizes</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- SAMPLE ROW 1 -->
                        <tr data-id="1"
                            data-code="P1001"
                            data-name="Air Max 90"
                            data-vendor-id="1"
                            data-buying="1800"
                            data-selling="2300"
                            data-stock="14"
                            data-colors='["#000000","#ffffff"]'
                            data-sizes='[40,41,42]'
                            data-active="true">
                            <td>P1001</td>
                            <td>Air Max 90</td>
                            <td>Nike</td>
                            <td>1800.00</td>
                            <td>2300.00</td>
                            <td>14</td>
                            <td>
                                <span class="color-dot" style="background:#000000"></span>
                                <span class="color-dot" style="background:#ffffff;border:1px solid #ddd"></span>
                            </td>
                            <td>40, 41, 42</td>
                            <td><span class="badge bg-success">Active</span></td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary action-btn-sm" onclick="editProduct(1)"><i class="bi bi-pencil"></i></button>
                                <button class="btn btn-sm btn-outline-danger action-btn-sm" onclick="confirmDelete(1)"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>

                        <!-- SAMPLE ROW 2 -->
                        <tr data-id="2"
                            data-code="P1002"
                            data-name="Ultraboost"
                            data-vendor-id="2"
                            data-buying="2100"
                            data-selling="2700"
                            data-stock="2"
                            data-colors='["#4444ff"]'
                            data-sizes='[43]'
                            data-active="true">
                            <td>P1002</td>
                            <td>Ultraboost</td>
                            <td>Adidas</td>
                            <td>2100.00</td>
                            <td>2700.00</td>
                            <td>2</td>
                            <td><span class="color-dot" style="background:#4444ff"></span></td>
                            <td>43</td>
                            <td><span class="badge bg-success">Active</span></td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary action-btn-sm" onclick="editProduct(2)"><i class="bi bi-pencil"></i></button>
                                <button class="btn btn-sm btn-outline-danger action-btn-sm" onclick="confirmDelete(2)"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>

                        <!-- SAMPLE ROW 3 -->
                        <tr data-id="3"
                            data-code="P1003"
                            data-name="Classic Suede"
                            data-vendor-id="3"
                            data-buying="1500"
                            data-selling="1900"
                            data-stock="0"
                            data-colors='["#8b5cf6"]'
                            data-sizes='[42]'
                            data-active="false">
                            <td>P1003</td>
                            <td>Classic Suede</td>
                            <td>Puma</td>
                            <td>1500.00</td>
                            <td>1900.00</td>
                            <td>0</td>
                            <td><span class="color-dot" style="background:#8b5cf6"></span></td>
                            <td>42</td>
                            <td><span class="badge bg-secondary">Inactive</span></td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary action-btn-sm" onclick="editProduct(3)"><i class="bi bi-pencil"></i></button>
                                <button class="btn btn-sm btn-outline-danger action-btn-sm" onclick="confirmDelete(3)"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Low Stock by Color -->
        <div class="tab-pane fade" id="lowColor" role="tabpanel">
            <div class="table-responsive mt-2">
                <table class="table table-bordered table-hover align-middle text-center custom-table">
                    <thead class="table-light">
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                            <th>Vendor</th>
                            <th>Remaining Color(s)</th>
                            <th>Total Stock</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Products with only 1 color left -->
                        <tr>
                            <td>P1002</td>
                            <td>Ultraboost</td>
                            <td>Adidas</td>
                            <td><span class="color-dot" style="background:#4444ff"></span></td>
                            <td>2</td>
                        </tr>
                        <tr>
                            <td>P1003</td>
                            <td>Classic Suede</td>
                            <td>Puma</td>
                            <td><span class="color-dot" style="background:#8b5cf6"></span></td>
                            <td>0</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Low Stock by Size -->
        <div class="tab-pane fade" id="lowSize" role="tabpanel">
            <div class="table-responsive mt-2">
                <table class="table table-bordered table-hover align-middle text-center custom-table">
                    <thead class="table-light">
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                            <th>Vendor</th>
                            <th>Remaining Size(s)</th>
                            <th>Total Stock</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Products with only 1 size left -->
                        <tr>
                            <td>P1002</td>
                            <td>Ultraboost</td>
                            <td>Adidas</td>
                            <td>43</td>
                            <td>2</td>
                        </tr>
                        <tr>
                            <td>P1003</td>
                            <td>Classic Suede</td>
                            <td>Puma</td>
                            <td>42</td>
                            <td>0</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Almost Out (<=3) -->
        <div class="tab-pane fade" id="almostOut" role="tabpanel">
            <div class="table-responsive mt-2">
                <table class="table table-bordered table-hover align-middle text-center custom-table">
                    <thead class="table-light">
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                            <th>Vendor</th>
                            <th>Total Stock</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>P1002</td>
                            <td>Ultraboost</td>
                            <td>Adidas</td>
                            <td>2</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Inactive Products Tab -->
        <div class="tab-pane fade" id="inactiveProducts" role="tabpanel">
            <div class="table-responsive mt-2">
                <table class="table table-bordered table-hover align-middle text-center custom-table">
                    <thead class="table-light">
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                            <th>Vendor</th>
                            <th>Last Activity</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Static example: no movement last month -->
                        <tr>
                            <td>P1003</td>
                            <td>Classic Suede</td>
                            <td>Puma</td>
                            <td>— 45 days</td>
                            <td><span class="badge bg-secondary">Inactive</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>

<!-- Modal for Add/Edit Product -->
<div class="modal fade" id="productModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="productModalLabel">Add Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="productForm" autocomplete="off">
                    <input type="hidden" id="productId" />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Product Code <span class="text-danger">*</span></label>
                            <input id="productCode" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Vendor <span class="text-danger">*</span></label>
                            <select id="vendorSelect" class="form-select" required>
                                <option value="">-- Select vendor --</option>
                                <option value="1">Nike</option>
                                <option value="2">Adidas</option>
                                <option value="3">Puma</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label class="form-label">Buying Price</label>
                            <input type="number" id="buyingPrice" class="form-control" step="0.01" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Selling Price</label>
                            <input type="number" id="sellingPrice" class="form-control" step="0.01" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Discount Limit (%)</label>
                            <input type="number" id="discountLimit" class="form-control" step="0.01" />
                        </div>

                        <div class="col-12">
                            <label class="form-label">Description / Name</label>
                            <input id="description" class="form-control" />
                        </div>

                        <div class="col-12 mt-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="addInitialStock">
                                <label class="form-check-label fw-semibold" for="addInitialStock">
                                    Add initial quantities now
                                </label>
                            </div>
                        </div>

                        <!-- Variant Section (Hidden until checkbox is checked) -->
                        <div id="variantSection" class="mt-3 d-none col-12">
                            <h6 class="text-primary">Initial Variants</h6>
                            <div class="variant-area mb-2" id="variantArea">
                                <table class="table table-sm align-middle mb-0" id="variantTable">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width:90px">Color</th>
                                            <th style="width:130px">Size</th>
                                            <th style="width:90px">Stock</th>
                                            <th style="width:60px">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- variant rows will be appended here -->
                                    </tbody>
                                </table>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" id="btnAddVariantRow" class="btn btn-sm btn-outline-primary">
                                    <i class="bi bi-plus"></i> Add Variant
                                </button>
                                <small class="text-muted align-self-center">Rows editable — use the pencil to edit row values and X to delete.</small>
                            </div>
                        </div>

                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <div class="me-auto text-muted small">Products can be created without variants. Variants usually created via purchase invoices.</div>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="saveProductBtn" class="btn btn-success">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            // ----- helpers to render colors / sizes -----
            function renderColorDots(colors) {
                if (!Array.isArray(colors) || colors.length === 0) return '';
                return colors.map(c => `<span class="color-dot" style="background:${c}"></span>`).join('');
            }
            function renderSizes(sizes) {
                if (!Array.isArray(sizes) || sizes.length === 0) return '';
                return sizes.join(', ');
            }

            // ----- modal refs -----
            const productModalEl = document.getElementById('productModal');
            const productModal = new bootstrap.Modal(productModalEl);
            const modalTitle = document.getElementById('productModalLabel');
            const productForm = document.getElementById('productForm');

            // form inputs
            const inputId = document.getElementById('productId');
            const inputCode = document.getElementById('productCode');
            const inputVendor = document.getElementById('vendorSelect');
            const inputBuying = document.getElementById('buyingPrice');
            const inputSelling = document.getElementById('sellingPrice');
            const inputDiscount = document.getElementById('discountLimit');
            const inputDesc = document.getElementById('description');
            const checkboxAddStock = document.getElementById('addInitialStock');

            const variantSection = document.getElementById('variantSection');
            const variantArea = document.getElementById('variantArea');
            const variantTableBody = document.querySelector('#variantTable tbody');
            const btnAddVariantRow = document.getElementById('btnAddVariantRow');

            // product table
            const productsTableBody = document.getElementById('productTableBody');

            // ----- utility: find row by id -----
            function findRowById(id) {
                return productsTableBody.querySelector(`tr[data-id="${id}"]`);
            }

            // ----- open Add modal -----
            document.getElementById('btnAddProduct').addEventListener('click', () => {
                modalTitle.textContent = 'Add Product';
                productForm.reset();
                inputId.value = '';
                variantTableBody.innerHTML = '';
                variantSection.classList.add('d-none');
                productModal.show();
            });

            // ----- confirm delete using shared helper -----
            window.confirmDelete = function (id) {
                // use shared modal helper
                ShowModalConfirm('هل أنت متأكد من حذف هذا المنتج؟', async function () {
                    // deletion simulation: remove row
                    const row = findRowById(id);
                    if (row) row.remove();
                    ShowToast('تم حذف المنتج', 'success');
                }, 'تأكيد الحذف', 'نعم', 'إلغاء');
            };

            // ----- edit product: populate modal from row data -----
            window.editProduct = function (id) {
                const row = findRowById(id);
                if (!row) return;
                modalTitle.textContent = 'Edit Product';
                const code = row.getAttribute('data-code') || '';
                const name = row.getAttribute('data-name') || '';
                const vendorId = row.getAttribute('data-vendor-id') || '';
                const buying = row.getAttribute('data-buying') || '';
                const selling = row.getAttribute('data-selling') || '';
                const discount = row.getAttribute('data-discount') || '';
                const active = row.getAttribute('data-active') === 'true';
                const colors = JSON.parse(row.getAttribute('data-colors') || '[]');
                const sizes = JSON.parse(row.getAttribute('data-sizes') || '[]');

                inputId.value = id;
                inputCode.value = code;
                inputDesc.value = name;
                inputVendor.value = vendorId;
                inputBuying.value = buying;
                inputSelling.value = selling;
                inputDiscount.value = discount || '';
                checkboxAddStock.checked = (colors.length > 0 || sizes.length > 0);
                variantSection.classList.toggle('d-none', !checkboxAddStock.checked);

                // populate variant table from colors x sizes: create rows for combinations if exist
                variantTableBody.innerHTML = '';
                // simple logic: if there are colors and sizes, pair them; otherwise create rows per color/size
                if (colors.length && sizes.length) {
                    // pair them (for demo we pair sequentially)
                    const maxLen = Math.max(colors.length, sizes.length);
                    for (let i = 0; i < maxLen; i++) {
                        const color = colors[i % colors.length];
                        const size = sizes[i % sizes.length];
                        appendVariantRow({ color, size, stock: 1 });
                    }
                } else if (colors.length) {
                    colors.forEach(c => appendVariantRow({ color: c, size: '', stock: 1 }));
                } else if (sizes.length) {
                    sizes.forEach(s => appendVariantRow({ color: '#ffffff', size: s, stock: 1 }));
                }

                productModal.show();
            };

            // ----- variant row create / append -----
            function appendVariantRow({ color = '#000000', size = '', stock = 0 } = {}) {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td style="width:90px">
                        <input type="color" class="form-control form-control-color form-control-sm variant-color" value="${color}">
                    </td>
                    <td style="width:130px">
                        <input type="number" class="form-control form-control-sm variant-size" value="${size}">
                    </td>
                    <td style="width:90px">
                        <input type="number" class="form-control form-control-sm variant-stock" value="${stock}">
                    </td>
                    <td style="width:60px" class="text-center">
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" title="Save row" onclick="saveVariantRow(this)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" title="Delete row" onclick="deleteVariantRow(this)">
                            <i class="bi bi-x"></i>
                        </button>
                    </td>
                `;
                variantTableBody.appendChild(tr);
            }

            // expose small functions for variant buttons
            window.deleteVariantRow = function (btn) {
                const tr = btn.closest('tr');
                if (tr) tr.remove();
            };
            window.saveVariantRow = function (btn) {
                // for now just flash a small toast — values are already in inputs
                ShowToast('تم حفظ الصف', 'success');
            };

            btnAddVariantRow.addEventListener('click', () => {
                appendVariantRow({ color: '#ffffff', size: '', stock: 0 });
            });

            // toggle variant section visibility
            checkboxAddStock.addEventListener('change', (e) => {
                variantSection.classList.toggle('d-none', !e.target.checked);
            });

            // ----- Save product (simulate update/insert row DOM) -----
            document.getElementById('saveProductBtn').addEventListener('click', function () {
                const id = inputId.value;
                const code = inputCode.value.trim();
                const name = inputDesc.value.trim();
                const vendorId = inputVendor.value;
                const vendorName = inputVendor.options[inputVendor.selectedIndex]?.text || '';
                const buying = parseFloat(inputBuying.value || 0);
                const selling = parseFloat(inputSelling.value || 0);
                const discount = parseFloat(inputDiscount.value || 0);
                const active = true; // for demo keep active

                if (!code || !vendorId) {
                    ShowToast('املأ الحقول المطلوبة: كود المنتج والمورد', 'warning');
                    return;
                }

                // collect variants data from table
                const variantRows = Array.from(variantTableBody.querySelectorAll('tr'));
                const colors = [];
                const sizes = [];
                let totalStock = 0;
                variantRows.forEach(r => {
                    const color = r.querySelector('.variant-color')?.value || '#ffffff';
                    const sizeVal = r.querySelector('.variant-size')?.value;
                    const size = sizeVal ? (isNaN(sizeVal) ? sizeVal : Number(sizeVal)) : '';
                    const stockVal = parseInt(r.querySelector('.variant-stock')?.value || 0);
                    if (color) colors.push(color);
                    if (size !== '') sizes.push(size);
                    totalStock += (stockVal || 0);
                });

                if (id) {
                    // update existing row
                    const row = findRowById(id);
                    if (!row) {
                        ShowToast('صف المنتج غير موجود', 'error');
                        productModal.hide();
                        return;
                    }
                    row.setAttribute('data-code', code);
                    row.setAttribute('data-name', name);
                    row.setAttribute('data-vendor-id', vendorId);
                    row.setAttribute('data-buying', buying);
                    row.setAttribute('data-selling', selling);
                    row.setAttribute('data-stock', totalStock);
                    row.setAttribute('data-colors', JSON.stringify(colors));
                    row.setAttribute('data-sizes', JSON.stringify(sizes));
                    row.setAttribute('data-active', active ? 'true' : 'false');

                    // update visible cells
                    const cells = row.children;
                    cells[0].textContent = code;
                    cells[1].textContent = name || '-';
                    cells[2].textContent = vendorName || '-';
                    cells[3].textContent = buying.toFixed(2);
                    cells[4].textContent = selling.toFixed(2);
                    cells[5].textContent = totalStock;
                    cells[6].innerHTML = renderColorDots(colors);
                    cells[7].textContent = renderSizes(sizes);
                    cells[8].innerHTML = active ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-secondary">Inactive</span>';

                    ShowToast('تم تحديث المنتج', 'success');
                } else {
                    // create new row id (simple incremental)
                    const newId = (function () {
                        const ids = Array.from(productsTableIds());
                        return ids.length ? Math.max(...ids) + 1 : 1;
                    })();

                    const tr = document.createElement('tr');
                    tr.setAttribute('data-id', newId);
                    tr.setAttribute('data-code', code);
                    tr.setAttribute('data-name', name);
                    tr.setAttribute('data-vendor-id', vendorId);
                    tr.setAttribute('data-buying', buying);
                    tr.setAttribute('data-selling', selling);
                    tr.setAttribute('data-stock', totalStock);
                    tr.setAttribute('data-colors', JSON.stringify(colors));
                    tr.setAttribute('data-sizes', JSON.stringify(sizes));
                    tr.setAttribute('data-active', active ? 'true' : 'false');

                    tr.innerHTML = `
                        <td>${code}</td>
                        <td>${name || '-'}</td>
                        <td>${vendorName || '-'}</td>
                        <td>${buying.toFixed(2)}</td>
                        <td>${selling.toFixed(2)}</td>
                        <td>${totalStock}</td>
                        <td>${renderColorDots(colors)}</td>
                        <td>${renderSizes(sizes)}</td>
                        <td>${active ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-secondary">Inactive</span>'}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary action-btn-sm" onclick="editProduct(${newId})"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-sm btn-outline-danger action-btn-sm" onclick="confirmDelete(${newId})"><i class="bi bi-trash"></i></button>
                        </td>
                    `;
                    productsTableBody.prepend(tr);
                    ShowToast('تم إضافة المنتج', 'success');
                }

                productModal.hide();
            });

            // helper to get existing IDs
            function productsTableIds() {
                return Array.from(productsTableBody.querySelectorAll('tr[data-id]')).map(r => Number(r.getAttribute('data-id')));
            }

            // small search behavior (client-side)
            document.getElementById('searchInput').addEventListener('input', function () {
                const q = this.value.trim().toLowerCase();
                Array.from(productsTableBody.querySelectorAll('tr')).forEach(tr => {
                    const code = (tr.getAttribute('data-code') || '').toLowerCase();
                    const name = (tr.getAttribute('data-name') || '').toLowerCase();
                    const vendor = (tr.children[2]?.textContent || '').toLowerCase();
                    if (!q || code.includes(q) || name.includes(q) || vendor.includes(q)) {
                        tr.style.display = '';
                    } else {
                        tr.style.display = 'none';
                    }
                });
            });

            // small wrapper for ShowToast (your helper) — if not present fallback to simple alert
            function safeShowToast(msg, type) {
                try {
                    if (typeof ShowToast === 'function') ShowToast(msg, type === 'error' ? 'error' : (type === 'warning' ? 'warning' : 'success'));
                    else ShowToastFallback(msg, type);
                } catch (e) { console.warn(e); ShowToastFallback(msg, type); }
            }
            function ShowToastFallback(msg, type) {
                // bootstrap toast quick fallback
                const temp = document.createElement('div');
                temp.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : (type === 'warning' ? 'warning' : 'success')} border-0 position-fixed bottom-0 end-0 m-3`;
                temp.style.zIndex = 1055;
                temp.innerHTML = `<div class="d-flex"><div class="toast-body">${msg}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button></div>`;
                document.body.appendChild(temp);
                const bs = new bootstrap.Toast(temp, { delay: 2500 });
                bs.show();
                temp.addEventListener('hidden.bs.toast', () => temp.remove());
            }

            // map ShowToast name to your helper (if it exists)
            function ShowToast(msg, type) {
                // type: 'success' | 'warning' | 'error'
                if (typeof window.ShowToast === 'function') {
                    // your helper has different signature earlier (message, type, duration, position)
                    window.ShowToast(msg, type === 'error' ? 'error' : (type === 'warning' ? 'warning' : 'success'), 2500, 'bottom-right');
                } else {
                    ShowToastFallback(msg, type);
                }
            }

            // ensure ShowModalConfirm exists; otherwise fallback to window.confirm
            if (typeof window.ShowModalConfirm !== 'function') {
                window.ShowModalConfirm = function (message, onConfirm, title = 'Confirm', confirmText = 'Yes', cancelText = 'Cancel') {
                    if (confirm(message)) {
                        if (typeof onConfirm === 'function') onConfirm();
                    }
                };
            }

        })();
    </script>
}
